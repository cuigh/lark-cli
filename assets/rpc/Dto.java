// Generated by the lark-cli {{.ToolVersion}}.  DO NOT EDIT!
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
package {{.Package}}.dto;

{{range .Imports -}}
import {{.Path}};
{{end}}
/**
 * Dto
 */
public final class {{.Name}}Dto {
    private {{.Name}}Dto() {
    }
    {{- range .Types}}

    /**
     * {{.Description}}
     */
    @Setter
    @Getter
    @ProtoMessage(description = "{{.Description}}")
    public static class {{.Name}} {{if .Extends}}extends {{.Extends}} {{end}}{
        {{- range $i, $f := .Fields}}
        {{- if gt $i 0}}
        {{end}}
        /**
         * {{.Description}}
         */
        {{- range .Annotations}}
        @{{.}}
        {{- end}}
        @ProtoField(order = {{.Order}}, type = FieldType.{{.FieldType}}, {{if eq .Modifier "required"}}required = true, {{end}}description = "{{.Description}}")
        private {{.FullType}} {{.Name | camel}};
        {{- end}}
        {{- range .Fields}}
        {{- if eq .Modifier "repeated"}}

        /**
         * add item method
         *
         * @param item
         */
        public void add{{.Name | pascal}}({{.Type}} item) {
            ensure{{.Name | pascal}}();
            this.{{.Name | camel}}.add(item);
        }

        /**
         * add collection method
         *
         * @param items
         */
        public void add{{.Name | pascal}}(Collection<? extends {{.Type}}> items) {
            ensure{{.Name | pascal}}();
            this.{{.Name | camel}}.addAll(items);
        }

        private void ensure{{.Name | pascal}}() {
            if ({{.Name | camel}} == null) {
                this.{{.Name | camel}} = new ArrayList<>();
            }
        }
        {{- end -}}
        {{- end}}
    }
    {{- end}}
    {{- range .Errors}}

    /**
     * {{.Description}}
     */
    public static final class {{.Name}} {
        {{- range $i, $e := .Errors}}
        {{- if gt $i 0}}
        {{end}}
        /**
         * {{.Message}}
         */
        public static final Error {{.Name | upper}} = Error.of({{.Code}}, "{{.Message}}");
        {{- end}}

        private {{.Name}}() {
        }
    }
    {{- end}}
}